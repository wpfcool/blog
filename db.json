{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/jacman/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/FontAwesome.otf","path":"font/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","path":"font/coveredbyyourgrace-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","path":"font/coveredbyyourgrace-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","path":"font/coveredbyyourgrace-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","path":"font/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","path":"font/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.eot","path":"font/fontdiao.eot","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.woff","path":"font/fontdiao.woff","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.ttf","path":"font/fontdiao.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/author.jpg","path":"img/author.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","path":"img/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","path":"img/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nc.svg","path":"img/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-nd.svg","path":"img/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by-sa.svg","path":"img/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-by.svg","path":"img/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/cc-zero.svg","path":"img/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/jacman.jpg","path":"img/jacman.jpg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.svg","path":"img/logo.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/scrollup.png","path":"img/scrollup.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/gallery.js","path":"js/gallery.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","path":"js/jquery.qrcode-0.12.0.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/totop.js","path":"js/totop.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","path":"font/coveredbyyourgrace-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","path":"font/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontdiao.svg","path":"font/fontdiao.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","path":"js/jquery-2.0.3.min.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","path":"font/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/jacman/source/img/banner.jpg","path":"img/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d8a62d68a0a65b4647f03ca8cd0d65d95892c121","modified":1461207297000},{"_id":"themes/jacman/.gitignore","hash":"7d65523f2a5afb69d76824dd1dfa62a34faa3197","modified":1461207297000},{"_id":"themes/jacman/LICENSE","hash":"931516aa36c53eb7843c83d82662eb50cc3c4367","modified":1461207297000},{"_id":"themes/jacman/README.md","hash":"563fd972b298b6b00540b34c4cfe9485084ea8d5","modified":1461207297000},{"_id":"themes/jacman/README_zh.md","hash":"0854e4c96f53005f3a47e21af3f8aee361719ce4","modified":1461207297000},{"_id":"themes/jacman/_config.yml","hash":"a5af407cf19f233b93c4aab3b128f8c8c872a0ab","modified":1461207297000},{"_id":"source/_posts/swift3.md","hash":"11a11cae1d8d9ee6cea1c9b279cbf977ee21c027","modified":1461207297000},{"_id":"source/_posts/swift4.md","hash":"f59121b8d5917e8e63d3b66b577b2cb2545e82c1","modified":1461207297000},{"_id":"source/_posts/swift开发(一).md","hash":"8563919a157fc26b9f3f618c341d19bb6f080505","modified":1461207297000},{"_id":"source/_posts/swift开发(二).md","hash":"aa075e313ac71df68a016b2b00c1efbe3ee69287","modified":1461207297000},{"_id":"themes/jacman/languages/default.yml","hash":"eea72d6138497287c0b3f4bd93e4f6f62b7aff37","modified":1461207297000},{"_id":"themes/jacman/languages/zh-CN.yml","hash":"1f3b9d00dd4322352b0c9c82a76dc9865a616d41","modified":1461207297000},{"_id":"themes/jacman/languages/zh-TW.yml","hash":"61a02ba818d641579a86fcd7f5926ab1e6ab5f70","modified":1461207297000},{"_id":"themes/jacman/layout/archive.ejs","hash":"a18842e3d719fe3ca9b977a6995f8facc75c8673","modified":1461207297000},{"_id":"themes/jacman/layout/category.ejs","hash":"9b740fc33f6f028df60f0bc4312bf3ebd03aa8ea","modified":1461207297000},{"_id":"themes/jacman/layout/index.ejs","hash":"75cef2172c286994af412e11ab7f4f5a0daaf1f5","modified":1461207297000},{"_id":"themes/jacman/layout/layout.ejs","hash":"5b4289a4526899809b9c2facea535367ff51ba2b","modified":1461207297000},{"_id":"themes/jacman/layout/page.ejs","hash":"bd6bbf2ea8e183bd835867ff617dc6366b56748c","modified":1461207297000},{"_id":"themes/jacman/layout/post.ejs","hash":"3114134775bdde5a83cf14feb019606fa2b2b2be","modified":1461207297000},{"_id":"themes/jacman/layout/tag.ejs","hash":"45150a2365768b6b67880193c9264ad2bb4814db","modified":1461207297000},{"_id":"themes/jacman/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/after_footer.ejs","hash":"c703b0c25139b8a5f8f9d24a334a07905e2b7987","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/analytics.ejs","hash":"697601996220fe0a0f9cd628be67dec3c86ae2aa","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/archive.ejs","hash":"2c7395e7563fe016521712a645c28a13f952d52a","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/article.ejs","hash":"261ecacb8456f4cb972632b6a9103860fa63b9a3","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/article_row.ejs","hash":"4cb855d91ece7f67b2ca0992fffa55472d0b9c93","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/categories.ejs","hash":"8a52d0344d5bce1925cf586ed73c11192925209b","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/footer.ejs","hash":"5f80bf6c6ddcf8c28c4599cd1540b14b25d54f18","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/head.ejs","hash":"761941be4922cd3c177c8130296b909bf7db5c09","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/header.ejs","hash":"18515612344ff048b9372b91b7eef6f3b143801f","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/mathjax.ejs","hash":"d42994ac696f52ba99c1cbac382cd76d5b04a3e8","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/pagination.ejs","hash":"6146ac37dfb4f8613090bc52b3fc8cfa911a186a","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/search.ejs","hash":"1083824a6c6c3df02767f2f3b727aee78ebb76ec","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/sidebar.ejs","hash":"c4f527fff0070fbe65919053a16224412317f40d","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/tags.ejs","hash":"b33b2b5d08f1d53a8de25a95f660f7f1cea7b3cb","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/tinysou_search.ejs","hash":"06ecddc8a9d40b480fe2e958af1dab857a9d5441","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/totop.ejs","hash":"bea5bb7cb9350b8af7d97a8d223af63a5b30ab78","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/archive.ejs","hash":"39ea6b7888406fbd1b4cf236ebd718e881493374","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/category.ejs","hash":"c1fae96b5053da021bcc04ab2ce5c2c8d30de8a2","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/douban.ejs","hash":"e3820c36169e88663e6c9177666b2904c1ce47e6","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/github-card.ejs","hash":"5c759b6ea214bac56a393247de27e67ce73fb33f","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/links.ejs","hash":"e49868063439c2092cdf9a8ec82cc295b0e42f66","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/rss.ejs","hash":"0a4b5f2a2e36a1d504fe2e7c6c8372cbb4628aab","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/tag.ejs","hash":"7e82ad9c916b9ce871b2f65ce8f283c5ba47947b","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/tagcloud.ejs","hash":"10a1001189d5c28ce6d42494563b9637c302b454","modified":1461207297000},{"_id":"themes/jacman/layout/_widget/weibo.ejs","hash":"a31c2b223d0feb2a227e203cac9e5d13b7d328a8","modified":1461207297000},{"_id":"themes/jacman/source/css/style.styl","hash":"a0a45af186a72ae68979bf26f2a5d0d2303189ca","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461207297000},{"_id":"themes/jacman/source/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461207297000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1461207297000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1461207297000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1461207297000},{"_id":"themes/jacman/source/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461207297000},{"_id":"themes/jacman/source/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461207297000},{"_id":"themes/jacman/source/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1461207297000},{"_id":"themes/jacman/source/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1461207297000},{"_id":"themes/jacman/source/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1461207297000},{"_id":"themes/jacman/source/img/author.jpg","hash":"887ecc92097193d78a9768eae938a64fb298eeed","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1461207297000},{"_id":"themes/jacman/source/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1461207297000},{"_id":"themes/jacman/source/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1461207297000},{"_id":"themes/jacman/source/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1461207297000},{"_id":"themes/jacman/source/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1461207297000},{"_id":"themes/jacman/source/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1461207297000},{"_id":"themes/jacman/source/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1461207297000},{"_id":"themes/jacman/source/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1461207297000},{"_id":"themes/jacman/source/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1461207297000},{"_id":"themes/jacman/source/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1461207297000},{"_id":"themes/jacman/source/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1461207297000},{"_id":"themes/jacman/source/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461207297000},{"_id":"themes/jacman/source/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1461207297000},{"_id":"themes/jacman/source/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1461207297000},{"_id":"themes/jacman/source/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/article.ejs","hash":"b09e3acea7076e1f01dfe0c2295e19951ea09437","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/catetags.ejs","hash":"0e37bababc8f4659f5b59a552a946b46d89e4158","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/comment.ejs","hash":"c88bc8f5805173920a5fdd7e9234a850e3d8e151","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/footer.ejs","hash":"b12ec08a5845a3d8c01257614f1dfead879c87d2","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/gallery.ejs","hash":"fafc2501d7e65983b0f5c2b58151ca12e57c0574","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/header.ejs","hash":"36a705942b691abe0d643ea8afa339981b32f6f2","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/jiathis.ejs","hash":"d7f5960039ac74924559ab6ba03c64457b8f0966","modified":1461207297000},{"_id":"themes/jacman/layout/_partial/post/pagination.ejs","hash":"7de9c07a4c968429a8088c31a28b7f3a993ded1b","modified":1461207297000},{"_id":"themes/jacman/source/css/_base/font.styl","hash":"c8a0faf43b08e37ad07a5669db76d595da966159","modified":1461207297000},{"_id":"themes/jacman/source/css/_base/public.styl","hash":"f016180726019927b9a835ed01e04d153f27a149","modified":1461207297000},{"_id":"themes/jacman/source/css/_base/variable.styl","hash":"cb652eb83c28a208743fabab92de896f8b7cbf7b","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/article.styl","hash":"c69641b4a34a8c62986b335414413dbde26de25e","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/aside.styl","hash":"506fde1d67ce750452cbe84bee01a19c7d027c5e","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/duoshuo.styl","hash":"e85f1192283f043115c272a9deb3cb6ced793990","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/footer.styl","hash":"1911613a19b605a58f801c21b03b5d4c83b90f9c","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/gallery.styl","hash":"7246809f4ce3166ec1b259bf475cae1a48e29aad","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/header.styl","hash":"5121ceb712be3f2dde98b8b6e589b546e19eab8f","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/helper.styl","hash":"1136600932b97534b88465bf05ef313630b2de3d","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/index.styl","hash":"a72ff14effd276015264f870f47ed8f8413bf5d3","modified":1461207297000},{"_id":"themes/jacman/source/css/_partial/totop.styl","hash":"96363d7c5aaed5f649667fc0752a62620a67e872","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461207297000},{"_id":"themes/jacman/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461207297000},{"_id":"themes/jacman/source/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1461207297000},{"_id":"themes/jacman/source/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1461207297000},{"_id":"themes/jacman/source/css/_base/highlight/highlight.styl","hash":"91b62bfc58390b0d5db782a75be6965ee3665eb3","modified":1461207297000},{"_id":"themes/jacman/source/css/_base/highlight/theme.styl","hash":"e3a59bd427ba37a54ead9eeba9a5356b3f720a48","modified":1461207297000},{"_id":"public/2016/04/20/swift4/index.html","hash":"257253c48af8ca1d2882b7d1aa7ac6da6ec6f547","modified":1461209134753},{"_id":"public/archives/index.html","hash":"4ae9d7a0c86595d9ca0c061d4c98a29d54895375","modified":1461209134753},{"_id":"public/archives/2016/index.html","hash":"2b300d2f4f6322af4ebcf1f2a903e92caa63cea0","modified":1461209134753},{"_id":"public/archives/2016/04/index.html","hash":"7fbe74cc9b57c018520b1ae951236c3bd2afaa81","modified":1461209134754},{"_id":"public/index.html","hash":"556bacc57a54af89f2e4b70561e52b7ec94aadbf","modified":1461209134754},{"_id":"public/tags/swift/index.html","hash":"3d89eb8a69a5aff56de79a86b49d92a636b8d763","modified":1461209134754},{"_id":"public/2016/04/20/swift3/index.html","hash":"90d2e5fbef2570b910771b95eb7ad37b52a18ce3","modified":1461209134754},{"_id":"public/2016/04/20/swift开发(二)/index.html","hash":"51486eabca6a6bf8f29d66526ab0b81a196f494e","modified":1461209134754},{"_id":"public/2016/04/20/swift开发(一)/index.html","hash":"787c16b72adf4267141e7aae12485233239390b6","modified":1461209134754},{"_id":"public/CNAME","hash":"d8a62d68a0a65b4647f03ca8cd0d65d95892c121","modified":1461209134768},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1461209134768},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1461209134768},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1461209134768},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1461209134768},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1461209134769},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1461209134769},{"_id":"public/font/coveredbyyourgrace-webfont.eot","hash":"a17d0f10534303e40f210c506ebb8703fa23b7de","modified":1461209134769},{"_id":"public/font/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1461209134769},{"_id":"public/font/coveredbyyourgrace-webfont.woff","hash":"c6f8dc1a2f6ce914f120e80a876b8fd77b98888e","modified":1461209134769},{"_id":"public/font/coveredbyyourgrace-webfont.ttf","hash":"194ccb4acf77a03dc25bcc174edb266143704fec","modified":1461209134769},{"_id":"public/font/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1461209134770},{"_id":"public/font/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1461209134770},{"_id":"public/font/fontdiao.eot","hash":"9544a0d7ba208989302bc4da5a184faeb0e883c9","modified":1461209134770},{"_id":"public/font/fontdiao.woff","hash":"71f54eb6e98aa28cafeb04aab71c0e5b349ea89f","modified":1461209134771},{"_id":"public/font/fontdiao.ttf","hash":"ee9fd7be2493c9bf6d2841044e69a0830d9d3fab","modified":1461209134771},{"_id":"public/img/author.jpg","hash":"887ecc92097193d78a9768eae938a64fb298eeed","modified":1461209134771},{"_id":"public/img/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1461209134771},{"_id":"public/img/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1461209134771},{"_id":"public/img/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1461209134772},{"_id":"public/img/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1461209134772},{"_id":"public/img/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1461209134773},{"_id":"public/img/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1461209134773},{"_id":"public/img/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1461209134773},{"_id":"public/img/favicon.ico","hash":"2d22a3e0c7905a894e832c831dd91c29c209c7a5","modified":1461209134773},{"_id":"public/img/jacman.jpg","hash":"0ba14a4a5e3be012826fc713c33479912126d34e","modified":1461209134773},{"_id":"public/img/logo.svg","hash":"9ae38f7225c38624faeb7b74996efa9de7bf065b","modified":1461209134773},{"_id":"public/img/scrollup.png","hash":"2137d4f1739aa8aa3fcb0348c3ddf1e41d62f2e3","modified":1461209134773},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1461209134773},{"_id":"public/font/coveredbyyourgrace-webfont.svg","hash":"eabdb262d8e246865dfb56031f01ff6e8d2f9d53","modified":1461209135944},{"_id":"public/font/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1461209135947},{"_id":"public/font/fontdiao.svg","hash":"334a94e6a66a8b089be7315d876bec93efe38d2b","modified":1461209135950},{"_id":"public/img/logo.png","hash":"fd08d12d1fa147cf894e8f8327e38f1758de32ed","modified":1461209135950},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1461209135955},{"_id":"public/js/gallery.js","hash":"f8a4ba7fb8349cca374a3c69fff9b2bf21f742ed","modified":1461209135955},{"_id":"public/js/jquery.imagesloaded.min.js","hash":"4109837b1f6477bacc6b095a863b1b95b1b3693f","modified":1461209135955},{"_id":"public/js/totop.js","hash":"cad23c5ea7163d1e5c05a0fd3ef9233469da10cb","modified":1461209135955},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1461209135955},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1461209135955},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1461209135955},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1461209135955},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1461209135955},{"_id":"public/css/style.css","hash":"b12fa858391638038d79987085c32a9928ecf7b8","modified":1461209135955},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1461209135955},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1461209135956},{"_id":"public/js/jquery.qrcode-0.12.0.min.js","hash":"57c3987166a26415a71292162690e82c21e315ad","modified":1461209135956},{"_id":"public/js/jquery-2.0.3.min.js","hash":"a0ae3697b0ab8c0e8bd3186c80db42abd6d97a8d","modified":1461209135956},{"_id":"public/font/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1461209135965},{"_id":"public/img/banner.jpg","hash":"5104860c4f8b2e84ef734ba6c37fe7a288bf0d74","modified":1461209135965}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"swift开发(四) 枚举与结构体","date":"2016-04-20T08:59:14.000Z","_content":"\n## 枚举\n\n用 enum 创建枚举 枚举中可包含 方法\n\n```\n// 枚举\nenum Rank:Int{\n    case Ace = 1\n    case Two,Three,Fore,Five,Six,Seven,Eight,Nine,Ten\n    case Jack,Queen,King\n    \n    func simpleDescription() -> String{\n        switch self{\n        case .Ace:\n            return \"ace\"\n        case .Jack:\n            return \"jack\"\n        case .Queen:\n            return \"queen\"\n        case .King:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        \n        }\n    \n    }\n\n}\nRank(rawValue: 1) // 用init?(rawValue)初始化\nlet ace = Rank.Ace\nlet aceRawValue = ace.rawValue\nace.simpleDescription()\n\nif let convert = Rank(rawValue: 3)\n{\n    let three = convert.simpleDescription()\n}\n\n```\n\n## 结构体\n","source":"_posts/swift4.md","raw":"---\ntitle: swift开发(四) 枚举与结构体\ndate: 2016-04-20 16:59:14\ntags: swift\n---\n\n## 枚举\n\n用 enum 创建枚举 枚举中可包含 方法\n\n```\n// 枚举\nenum Rank:Int{\n    case Ace = 1\n    case Two,Three,Fore,Five,Six,Seven,Eight,Nine,Ten\n    case Jack,Queen,King\n    \n    func simpleDescription() -> String{\n        switch self{\n        case .Ace:\n            return \"ace\"\n        case .Jack:\n            return \"jack\"\n        case .Queen:\n            return \"queen\"\n        case .King:\n            return \"king\"\n        default:\n            return String(self.rawValue)\n        \n        }\n    \n    }\n\n}\nRank(rawValue: 1) // 用init?(rawValue)初始化\nlet ace = Rank.Ace\nlet aceRawValue = ace.rawValue\nace.simpleDescription()\n\nif let convert = Rank(rawValue: 3)\n{\n    let three = convert.simpleDescription()\n}\n\n```\n\n## 结构体\n","slug":"swift4","published":1,"updated":"2016-04-21T02:54:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin9q6vj800008zqbcvpky0ln","content":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>用 enum 创建枚举 枚举中可包含 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 枚举</span><br><span class=\"line\">enum Rank:Int&#123;</span><br><span class=\"line\">    case Ace = 1</span><br><span class=\"line\">    case Two,Three,Fore,Five,Six,Seven,Eight,Nine,Ten</span><br><span class=\"line\">    case Jack,Queen,King</span><br><span class=\"line\">    </span><br><span class=\"line\">    func simpleDescription() -&gt; String&#123;</span><br><span class=\"line\">        switch self&#123;</span><br><span class=\"line\">        case .Ace:</span><br><span class=\"line\">            return &quot;ace&quot;</span><br><span class=\"line\">        case .Jack:</span><br><span class=\"line\">            return &quot;jack&quot;</span><br><span class=\"line\">        case .Queen:</span><br><span class=\"line\">            return &quot;queen&quot;</span><br><span class=\"line\">        case .King:</span><br><span class=\"line\">            return &quot;king&quot;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return String(self.rawValue)</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Rank(rawValue: 1) // 用init?(rawValue)初始化</span><br><span class=\"line\">let ace = Rank.Ace</span><br><span class=\"line\">let aceRawValue = ace.rawValue</span><br><span class=\"line\">ace.simpleDescription()</span><br><span class=\"line\"></span><br><span class=\"line\">if let convert = Rank(rawValue: 3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    let three = convert.simpleDescription()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2>","excerpt":"","more":"<h2 id=\"枚举\"><a href=\"#枚举\" class=\"headerlink\" title=\"枚举\"></a>枚举</h2><p>用 enum 创建枚举 枚举中可包含 方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 枚举</span><br><span class=\"line\">enum Rank:Int&#123;</span><br><span class=\"line\">    case Ace = 1</span><br><span class=\"line\">    case Two,Three,Fore,Five,Six,Seven,Eight,Nine,Ten</span><br><span class=\"line\">    case Jack,Queen,King</span><br><span class=\"line\">    </span><br><span class=\"line\">    func simpleDescription() -&gt; String&#123;</span><br><span class=\"line\">        switch self&#123;</span><br><span class=\"line\">        case .Ace:</span><br><span class=\"line\">            return &quot;ace&quot;</span><br><span class=\"line\">        case .Jack:</span><br><span class=\"line\">            return &quot;jack&quot;</span><br><span class=\"line\">        case .Queen:</span><br><span class=\"line\">            return &quot;queen&quot;</span><br><span class=\"line\">        case .King:</span><br><span class=\"line\">            return &quot;king&quot;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return String(self.rawValue)</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Rank(rawValue: 1) // 用init?(rawValue)初始化</span><br><span class=\"line\">let ace = Rank.Ace</span><br><span class=\"line\">let aceRawValue = ace.rawValue</span><br><span class=\"line\">ace.simpleDescription()</span><br><span class=\"line\"></span><br><span class=\"line\">if let convert = Rank(rawValue: 3)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    let three = convert.simpleDescription()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结构体\"><a href=\"#结构体\" class=\"headerlink\" title=\"结构体\"></a>结构体</h2>"},{"title":"swift开发（三） 对象与类","date":"2016-04-20T08:48:00.000Z","_content":"\n***\n## 类\n用class后面紧跟类名创建类\ninit() 初始化\n\n```\nclass NameShap {\n    var numberOfSides:Int = 0\n    var name: String\n    init(name:String){\n        self.name = name\n    }\n    func simpleDescription()->String{\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n\n\n```\n## 继承\noverride 重写方法\n\n```\nclass Square: NameShap {\n    var sideLength:Double\n    \n    init(sideLength:Double,name:String)\n    {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n    \n    func area() -> Double{\n        return sideLength * sideLength\n    }\n    \n    override func simpleDescription() -> String {\n        return \"a square with sides of length \\(sideLength)\"\n    }\n}\n\n```\n## getter setter 方法\n\n```\nclass EquilateralTriangle: NameShap {\n    var sideLength: Double = 0.0\n    init(sidelength:Double,name:String){\n        self.sideLength = sidelength\n        super.init(name: name)\n        numberOfSides = 3\n    }\n    \n    //get set\n    var perimetter: Double{\n        \n        get{\n            return 3.0 * sideLength\n        }\n        set {\n            sideLength = newValue / 3.0  //newValue 隐型的新值\n        \n        }\n    \n    }\n    \n    override func simpleDescription() -> String {\n        return \"an equilateral triangle with sides of length \\(sideLength)\"\n    }\n    \n}\n\n```\n## willSet didSet\n\n```\nclass TriangleAndSquare {\n \n    var triangle:EquilateralTriangle{\n        willSet{\n            squate.sideLength = newValue.sideLength\n            \n        \n        }\n    }\n\n    var squate:Square{\n        willSet{\n            triangle.sideLength = newValue.sideLength;\n        \n        }\n    \n    }\n    \n    init(size:Double,name:String){\n    \n        squate = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sidelength: size, name: name)\n        \n    }\n}\n```","source":"_posts/swift3.md","raw":"---\ntitle: swift开发（三） 对象与类\ndate: 2016-04-20 16:48:00\ntags: swift\n---\n\n***\n## 类\n用class后面紧跟类名创建类\ninit() 初始化\n\n```\nclass NameShap {\n    var numberOfSides:Int = 0\n    var name: String\n    init(name:String){\n        self.name = name\n    }\n    func simpleDescription()->String{\n        return \"A shape with \\(numberOfSides) sides.\"\n    }\n}\n\n\n```\n## 继承\noverride 重写方法\n\n```\nclass Square: NameShap {\n    var sideLength:Double\n    \n    init(sideLength:Double,name:String)\n    {\n        self.sideLength = sideLength\n        super.init(name: name)\n        numberOfSides = 4\n    }\n    \n    func area() -> Double{\n        return sideLength * sideLength\n    }\n    \n    override func simpleDescription() -> String {\n        return \"a square with sides of length \\(sideLength)\"\n    }\n}\n\n```\n## getter setter 方法\n\n```\nclass EquilateralTriangle: NameShap {\n    var sideLength: Double = 0.0\n    init(sidelength:Double,name:String){\n        self.sideLength = sidelength\n        super.init(name: name)\n        numberOfSides = 3\n    }\n    \n    //get set\n    var perimetter: Double{\n        \n        get{\n            return 3.0 * sideLength\n        }\n        set {\n            sideLength = newValue / 3.0  //newValue 隐型的新值\n        \n        }\n    \n    }\n    \n    override func simpleDescription() -> String {\n        return \"an equilateral triangle with sides of length \\(sideLength)\"\n    }\n    \n}\n\n```\n## willSet didSet\n\n```\nclass TriangleAndSquare {\n \n    var triangle:EquilateralTriangle{\n        willSet{\n            squate.sideLength = newValue.sideLength\n            \n        \n        }\n    }\n\n    var squate:Square{\n        willSet{\n            triangle.sideLength = newValue.sideLength;\n        \n        }\n    \n    }\n    \n    init(size:Double,name:String){\n    \n        squate = Square(sideLength: size, name: name)\n        triangle = EquilateralTriangle(sidelength: size, name: name)\n        \n    }\n}\n```","slug":"swift3","published":1,"updated":"2016-04-21T02:54:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin9q6vje00018zqbnkgju2oe","content":"<hr>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>用class后面紧跟类名创建类<br>init() 初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class NameShap &#123;</span><br><span class=\"line\">    var numberOfSides:Int = 0</span><br><span class=\"line\">    var name: String</span><br><span class=\"line\">    init(name:String)&#123;</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func simpleDescription()-&gt;String&#123;</span><br><span class=\"line\">        return &quot;A shape with \\(numberOfSides) sides.&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>override 重写方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Square: NameShap &#123;</span><br><span class=\"line\">    var sideLength:Double</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(sideLength:Double,name:String)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        self.sideLength = sideLength</span><br><span class=\"line\">        super.init(name: name)</span><br><span class=\"line\">        numberOfSides = 4</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func area() -&gt; Double&#123;</span><br><span class=\"line\">        return sideLength * sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func simpleDescription() -&gt; String &#123;</span><br><span class=\"line\">        return &quot;a square with sides of length \\(sideLength)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getter-setter-方法\"><a href=\"#getter-setter-方法\" class=\"headerlink\" title=\"getter setter 方法\"></a>getter setter 方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class EquilateralTriangle: NameShap &#123;</span><br><span class=\"line\">    var sideLength: Double = 0.0</span><br><span class=\"line\">    init(sidelength:Double,name:String)&#123;</span><br><span class=\"line\">        self.sideLength = sidelength</span><br><span class=\"line\">        super.init(name: name)</span><br><span class=\"line\">        numberOfSides = 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //get set</span><br><span class=\"line\">    var perimetter: Double&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        get&#123;</span><br><span class=\"line\">            return 3.0 * sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set &#123;</span><br><span class=\"line\">            sideLength = newValue / 3.0  //newValue 隐型的新值</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func simpleDescription() -&gt; String &#123;</span><br><span class=\"line\">        return &quot;an equilateral triangle with sides of length \\(sideLength)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"willSet-didSet\"><a href=\"#willSet-didSet\" class=\"headerlink\" title=\"willSet didSet\"></a>willSet didSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TriangleAndSquare &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    var triangle:EquilateralTriangle&#123;</span><br><span class=\"line\">        willSet&#123;</span><br><span class=\"line\">            squate.sideLength = newValue.sideLength</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var squate:Square&#123;</span><br><span class=\"line\">        willSet&#123;</span><br><span class=\"line\">            triangle.sideLength = newValue.sideLength;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(size:Double,name:String)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        squate = Square(sideLength: size, name: name)</span><br><span class=\"line\">        triangle = EquilateralTriangle(sidelength: size, name: name)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<hr>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><p>用class后面紧跟类名创建类<br>init() 初始化</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class NameShap &#123;</span><br><span class=\"line\">    var numberOfSides:Int = 0</span><br><span class=\"line\">    var name: String</span><br><span class=\"line\">    init(name:String)&#123;</span><br><span class=\"line\">        self.name = name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    func simpleDescription()-&gt;String&#123;</span><br><span class=\"line\">        return &quot;A shape with \\(numberOfSides) sides.&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>override 重写方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Square: NameShap &#123;</span><br><span class=\"line\">    var sideLength:Double</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(sideLength:Double,name:String)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        self.sideLength = sideLength</span><br><span class=\"line\">        super.init(name: name)</span><br><span class=\"line\">        numberOfSides = 4</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    func area() -&gt; Double&#123;</span><br><span class=\"line\">        return sideLength * sideLength</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func simpleDescription() -&gt; String &#123;</span><br><span class=\"line\">        return &quot;a square with sides of length \\(sideLength)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getter-setter-方法\"><a href=\"#getter-setter-方法\" class=\"headerlink\" title=\"getter setter 方法\"></a>getter setter 方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class EquilateralTriangle: NameShap &#123;</span><br><span class=\"line\">    var sideLength: Double = 0.0</span><br><span class=\"line\">    init(sidelength:Double,name:String)&#123;</span><br><span class=\"line\">        self.sideLength = sidelength</span><br><span class=\"line\">        super.init(name: name)</span><br><span class=\"line\">        numberOfSides = 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    //get set</span><br><span class=\"line\">    var perimetter: Double&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        get&#123;</span><br><span class=\"line\">            return 3.0 * sideLength</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set &#123;</span><br><span class=\"line\">            sideLength = newValue / 3.0  //newValue 隐型的新值</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    override func simpleDescription() -&gt; String &#123;</span><br><span class=\"line\">        return &quot;an equilateral triangle with sides of length \\(sideLength)&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"willSet-didSet\"><a href=\"#willSet-didSet\" class=\"headerlink\" title=\"willSet didSet\"></a>willSet didSet</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TriangleAndSquare &#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    var triangle:EquilateralTriangle&#123;</span><br><span class=\"line\">        willSet&#123;</span><br><span class=\"line\">            squate.sideLength = newValue.sideLength</span><br><span class=\"line\">            </span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    var squate:Square&#123;</span><br><span class=\"line\">        willSet&#123;</span><br><span class=\"line\">            triangle.sideLength = newValue.sideLength;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    init(size:Double,name:String)&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        squate = Square(sideLength: size, name: name)</span><br><span class=\"line\">        triangle = EquilateralTriangle(sidelength: size, name: name)</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"swift开发(一) 基础","date":"2016-04-20T02:54:50.000Z","_content":"\n# 常量和变量 \n## 声明常量和变量\n```\nlet maximumNumberOfLoginAttempts = 10\nvar currentLoginAttempt = 0\n//你可以在一行中声明多个常量或者多个变量，用逗号隔开\nvar x = 0.0, y = 0.0, z = 0.0\n//类型标注  当你声明常量或者变量的时候可以加上类型标注 说明常量或者变量中要存储的值的类型\n//注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型\nvar welcomeMessage: String\nwelcomeMessage = \"hello\"\n```\n## 常量变量的命名规则\n\n常量和变量的命名  你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符,常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。\n\n```\nlet π = 3.141592654\nlet 你好 = \"你好世界\"\nlet abc = 2\n```\n\n用 \\\\() 可以更简单的实现在字符串中包含一些值\n\n```\nlet apples = 3\nlet oranges = 5\n\nlet appleSummary = \"I have \\(apples) apples\"\nlet fruitSummary = \"I have \\(apples+oranges) pieces of fruit\"\n```\n\n# 数组 字典\n\n```\nar shoppingList = [\"catfish\",\"water\",\"tulips\",\"blue paint\"]\nshoppingList[1] = \"bottle of water\"\n\nvar occupations = [\"Malcolm\" : \"Captain\",\"Kaylee\":\"Mechanic\"]\n\noccupations[\"jayne\"] = \"pub\"\n\nprint(occupations)\n\n\n```\n## 创建空数组 和 字典\n\n```\nvar emptyArray = [String]()\nvar emptyDictionary = [String:Float]()\nemptyDictionary[\"dd\"] = 1.0\nprint(emptyDictionary)\n\nemptyArray.append(\"dd\")\nprint(emptyArray)\n\n//空\nshoppingList = []\noccupations = [:]\n\n```\n\n# Optional\n## 声明Optional\n\n声明为Optional只需要在类型后面紧跟一个?\n\n```\nvar optionalString: String? = \"hell0\"\n\nprint(optionalString == nil)\n```\n\n对于Optional值，不能直接进行操作，否则会报错：\n例如  \n\n```\nvar optionalString: String? = \"hell0\"\nlet value = optionalString.hashValue //报错\n```\n\n## Optional的 使用\n\n然后怎么使用Optional值呢？文档中也有提到说，在使用Optional值的时候需要在具体的操作，比如调用方法、属性、下标索引等前面需要加上一个?，“Optional Chaining的问号的意思是询问是否响应后面这个方法，和原来的isResponseToSelector有些类似”，如果是nil值，也就是Optional.None，固然不能响应后面的方法，所以就会跳过，如果有值，就是Optional.Some，可能就会拆包(unwrap)，然后对拆包后的值执行后面的操作，比如：\n\n```\nlet hashValue = strValue?.hashValue  \n```\n\n另外，对于Optional值，不能直接进行操作，否则会报错：\n上面提到Optional值需要拆包(unwrap)后才能得到原来值，然后才能对其操作，那怎么来拆包呢？拆包提到了几种方法，一种是Optional Binding， 比如：\n\n```\n\nif let str = strValue { \n    let hashValue = str.hashValue \n} \n\n```\n还有一种是在具体的操作前添加!符号，好吧，这又是什么诡异的语法?!\n \n直接上例子，strValue是Optional的String：\n\n```\nlet hashValue = strValue!.hashValue \n```\n这里的!表示“我确定这里的的strValue一定是非nil的\n\n## ?? 提供默认值\n\n```\nlet nichName: String? = \"xx\"\nlet fullNmae: String = \"john\"\nlet info = \"Hi \\(nichName ?? fullNmae)\"\n```\n\n# 条件语句及循环\n## if 及 for-in \nif 后必须是Boolean if socre {} 是错误的\n\n```\nlet individualScores = [75,43,103,87,12]\nvar teamScore = 0\n\nfor score in individualScores{\n    if score > 50{\n        teamScore += 3\n    }\n    else\n    {\n        teamScore += 1\n    }\n}\nprint(teamScore)\n\n```\n\n## switch\n```\nlet vegetable = \"x red pepper\"\nswitch vegetable {\n    case \"celery\":\n    print(\"add some raisins and make ants on a log\")\n    case \"cucumber\",\"watercress\":\n    print(\"That would make a good tea sandwich\")\n    case let x where x.hasPrefix(\"pepper\"):\n    print(\"is it a soicy \\(x)\")\ncase let x where x.hasSuffix(\"pepper\"):\n    print(x)\ndefault:\n    print(\"everythingt tastes good in soup\")\n\n}\n```\n## 循环\n\n```\nvar m = 101\nrepeat{\n    m = m * 2\n}while m < 100\nprint(m)\n\n\n```\n... 包含最右侧值\n..< 不包含最右侧值\n\n```\n\nvar firstForLoop = 0\nfor i in 0...4{\n    firstForLoop += i\n}\nprint(firstForLoop)\n```\n# 函数\n\n## 函数定义\n\nfun name(参数了列表) -> 返回值类型{}\n\n例\n\n```\nfunc greet(name: String,day: String)->String\n{\n    return \"hello \\(name) ,today is \\(day)\"\n}\n\nprint(greet(\"wpf\", day: \"2\"))\n```\n## 可变参数\n\n```\nfunc sumOf(numbers: Int...)->Int{\n    var sum = 0\n    for number in numbers{\n        sum += number\n    }\n    return sum\n}\n\nprint(sumOf(1,2,3,4))\n```\n\n## 函数作为返回值\n\n```\nfunc makeIncremementer() -> ((Int) -> Int)\n{\n    func addOne(number: Int) -> Int{\n        return number + 1\n    }\n    \n    return addOne\n}\n\nvar increment = makeIncremementer()\nprint(increment(7))\n```\n\n## 函数最为参数\n\n```\nfunc hasAnyMatches(list: [Int],condition:(Int)->Bool) -> Bool\n{\n    for item in list{\n        \n        if(condition(item)){\n            return true\n        }\n    \n    }\n    return false\n}\n\n\nfunc lessThanTen(number:Int) -> Bool\n{\n    return number < 10\n}\n\nvar numbers = [20,19,22,12]\n\nhasAnyMatches(numbers, condition: lessThanTen)\n```\n\n## 元组最为返回值 \n\n```\nfunc calculateStatistics(scores:[Int]) ->(min:Int ,max:Int,sum:Int)\n{\n    var min = scores[0]\n    var max = scores[0]\n    var sum = 0\n    \n    for score in scores{\n        if score > max\n        {\n            max = score\n        }else if score < min\n        {\n            min = score\n        }\n        sum += score\n    }\n    \n    return (min,max,sum)\n}\n\nlet statistics = calculateStatistics([1,2,3,4,5,6,7,8,9,10])\n\nprint(statistics.sum)\nprint(statistics.2)\n```\n","source":"_posts/swift开发(一).md","raw":"---\ntitle: swift开发(一) 基础\ndate: 2016-04-20 10:54:50\ntags: swift\n---\n\n# 常量和变量 \n## 声明常量和变量\n```\nlet maximumNumberOfLoginAttempts = 10\nvar currentLoginAttempt = 0\n//你可以在一行中声明多个常量或者多个变量，用逗号隔开\nvar x = 0.0, y = 0.0, z = 0.0\n//类型标注  当你声明常量或者变量的时候可以加上类型标注 说明常量或者变量中要存储的值的类型\n//注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型\nvar welcomeMessage: String\nwelcomeMessage = \"hello\"\n```\n## 常量变量的命名规则\n\n常量和变量的命名  你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符,常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。\n\n```\nlet π = 3.141592654\nlet 你好 = \"你好世界\"\nlet abc = 2\n```\n\n用 \\\\() 可以更简单的实现在字符串中包含一些值\n\n```\nlet apples = 3\nlet oranges = 5\n\nlet appleSummary = \"I have \\(apples) apples\"\nlet fruitSummary = \"I have \\(apples+oranges) pieces of fruit\"\n```\n\n# 数组 字典\n\n```\nar shoppingList = [\"catfish\",\"water\",\"tulips\",\"blue paint\"]\nshoppingList[1] = \"bottle of water\"\n\nvar occupations = [\"Malcolm\" : \"Captain\",\"Kaylee\":\"Mechanic\"]\n\noccupations[\"jayne\"] = \"pub\"\n\nprint(occupations)\n\n\n```\n## 创建空数组 和 字典\n\n```\nvar emptyArray = [String]()\nvar emptyDictionary = [String:Float]()\nemptyDictionary[\"dd\"] = 1.0\nprint(emptyDictionary)\n\nemptyArray.append(\"dd\")\nprint(emptyArray)\n\n//空\nshoppingList = []\noccupations = [:]\n\n```\n\n# Optional\n## 声明Optional\n\n声明为Optional只需要在类型后面紧跟一个?\n\n```\nvar optionalString: String? = \"hell0\"\n\nprint(optionalString == nil)\n```\n\n对于Optional值，不能直接进行操作，否则会报错：\n例如  \n\n```\nvar optionalString: String? = \"hell0\"\nlet value = optionalString.hashValue //报错\n```\n\n## Optional的 使用\n\n然后怎么使用Optional值呢？文档中也有提到说，在使用Optional值的时候需要在具体的操作，比如调用方法、属性、下标索引等前面需要加上一个?，“Optional Chaining的问号的意思是询问是否响应后面这个方法，和原来的isResponseToSelector有些类似”，如果是nil值，也就是Optional.None，固然不能响应后面的方法，所以就会跳过，如果有值，就是Optional.Some，可能就会拆包(unwrap)，然后对拆包后的值执行后面的操作，比如：\n\n```\nlet hashValue = strValue?.hashValue  \n```\n\n另外，对于Optional值，不能直接进行操作，否则会报错：\n上面提到Optional值需要拆包(unwrap)后才能得到原来值，然后才能对其操作，那怎么来拆包呢？拆包提到了几种方法，一种是Optional Binding， 比如：\n\n```\n\nif let str = strValue { \n    let hashValue = str.hashValue \n} \n\n```\n还有一种是在具体的操作前添加!符号，好吧，这又是什么诡异的语法?!\n \n直接上例子，strValue是Optional的String：\n\n```\nlet hashValue = strValue!.hashValue \n```\n这里的!表示“我确定这里的的strValue一定是非nil的\n\n## ?? 提供默认值\n\n```\nlet nichName: String? = \"xx\"\nlet fullNmae: String = \"john\"\nlet info = \"Hi \\(nichName ?? fullNmae)\"\n```\n\n# 条件语句及循环\n## if 及 for-in \nif 后必须是Boolean if socre {} 是错误的\n\n```\nlet individualScores = [75,43,103,87,12]\nvar teamScore = 0\n\nfor score in individualScores{\n    if score > 50{\n        teamScore += 3\n    }\n    else\n    {\n        teamScore += 1\n    }\n}\nprint(teamScore)\n\n```\n\n## switch\n```\nlet vegetable = \"x red pepper\"\nswitch vegetable {\n    case \"celery\":\n    print(\"add some raisins and make ants on a log\")\n    case \"cucumber\",\"watercress\":\n    print(\"That would make a good tea sandwich\")\n    case let x where x.hasPrefix(\"pepper\"):\n    print(\"is it a soicy \\(x)\")\ncase let x where x.hasSuffix(\"pepper\"):\n    print(x)\ndefault:\n    print(\"everythingt tastes good in soup\")\n\n}\n```\n## 循环\n\n```\nvar m = 101\nrepeat{\n    m = m * 2\n}while m < 100\nprint(m)\n\n\n```\n... 包含最右侧值\n..< 不包含最右侧值\n\n```\n\nvar firstForLoop = 0\nfor i in 0...4{\n    firstForLoop += i\n}\nprint(firstForLoop)\n```\n# 函数\n\n## 函数定义\n\nfun name(参数了列表) -> 返回值类型{}\n\n例\n\n```\nfunc greet(name: String,day: String)->String\n{\n    return \"hello \\(name) ,today is \\(day)\"\n}\n\nprint(greet(\"wpf\", day: \"2\"))\n```\n## 可变参数\n\n```\nfunc sumOf(numbers: Int...)->Int{\n    var sum = 0\n    for number in numbers{\n        sum += number\n    }\n    return sum\n}\n\nprint(sumOf(1,2,3,4))\n```\n\n## 函数作为返回值\n\n```\nfunc makeIncremementer() -> ((Int) -> Int)\n{\n    func addOne(number: Int) -> Int{\n        return number + 1\n    }\n    \n    return addOne\n}\n\nvar increment = makeIncremementer()\nprint(increment(7))\n```\n\n## 函数最为参数\n\n```\nfunc hasAnyMatches(list: [Int],condition:(Int)->Bool) -> Bool\n{\n    for item in list{\n        \n        if(condition(item)){\n            return true\n        }\n    \n    }\n    return false\n}\n\n\nfunc lessThanTen(number:Int) -> Bool\n{\n    return number < 10\n}\n\nvar numbers = [20,19,22,12]\n\nhasAnyMatches(numbers, condition: lessThanTen)\n```\n\n## 元组最为返回值 \n\n```\nfunc calculateStatistics(scores:[Int]) ->(min:Int ,max:Int,sum:Int)\n{\n    var min = scores[0]\n    var max = scores[0]\n    var sum = 0\n    \n    for score in scores{\n        if score > max\n        {\n            max = score\n        }else if score < min\n        {\n            min = score\n        }\n        sum += score\n    }\n    \n    return (min,max,sum)\n}\n\nlet statistics = calculateStatistics([1,2,3,4,5,6,7,8,9,10])\n\nprint(statistics.sum)\nprint(statistics.2)\n```\n","slug":"swift开发(一)","published":1,"updated":"2016-04-21T02:54:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin9q6vjp00038zqbtv6i1xuz","content":"<h1 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h1><h2 id=\"声明常量和变量\"><a href=\"#声明常量和变量\" class=\"headerlink\" title=\"声明常量和变量\"></a>声明常量和变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let maximumNumberOfLoginAttempts = 10</span><br><span class=\"line\">var currentLoginAttempt = 0</span><br><span class=\"line\">//你可以在一行中声明多个常量或者多个变量，用逗号隔开</span><br><span class=\"line\">var x = 0.0, y = 0.0, z = 0.0</span><br><span class=\"line\">//类型标注  当你声明常量或者变量的时候可以加上类型标注 说明常量或者变量中要存储的值的类型</span><br><span class=\"line\">//注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型</span><br><span class=\"line\">var welcomeMessage: String</span><br><span class=\"line\">welcomeMessage = &quot;hello&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常量变量的命名规则\"><a href=\"#常量变量的命名规则\" class=\"headerlink\" title=\"常量变量的命名规则\"></a>常量变量的命名规则</h2><p>常量和变量的命名  你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符,常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let π = 3.141592654</span><br><span class=\"line\">let 你好 = &quot;你好世界&quot;</span><br><span class=\"line\">let abc = 2</span><br></pre></td></tr></table></figure>\n<p>用 \\() 可以更简单的实现在字符串中包含一些值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let apples = 3</span><br><span class=\"line\">let oranges = 5</span><br><span class=\"line\"></span><br><span class=\"line\">let appleSummary = &quot;I have \\(apples) apples&quot;</span><br><span class=\"line\">let fruitSummary = &quot;I have \\(apples+oranges) pieces of fruit&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-字典\"><a href=\"#数组-字典\" class=\"headerlink\" title=\"数组 字典\"></a>数组 字典</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ar shoppingList = [&quot;catfish&quot;,&quot;water&quot;,&quot;tulips&quot;,&quot;blue paint&quot;]</span><br><span class=\"line\">shoppingList[1] = &quot;bottle of water&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var occupations = [&quot;Malcolm&quot; : &quot;Captain&quot;,&quot;Kaylee&quot;:&quot;Mechanic&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">occupations[&quot;jayne&quot;] = &quot;pub&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(occupations)</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建空数组-和-字典\"><a href=\"#创建空数组-和-字典\" class=\"headerlink\" title=\"创建空数组 和 字典\"></a>创建空数组 和 字典</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var emptyArray = [String]()</span><br><span class=\"line\">var emptyDictionary = [String:Float]()</span><br><span class=\"line\">emptyDictionary[&quot;dd&quot;] = 1.0</span><br><span class=\"line\">print(emptyDictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">emptyArray.append(&quot;dd&quot;)</span><br><span class=\"line\">print(emptyArray)</span><br><span class=\"line\"></span><br><span class=\"line\">//空</span><br><span class=\"line\">shoppingList = []</span><br><span class=\"line\">occupations = [:]</span><br></pre></td></tr></table></figure>\n<h1 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h1><h2 id=\"声明Optional\"><a href=\"#声明Optional\" class=\"headerlink\" title=\"声明Optional\"></a>声明Optional</h2><p>声明为Optional只需要在类型后面紧跟一个?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optionalString: String? = &quot;hell0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(optionalString == nil)</span><br></pre></td></tr></table></figure>\n<p>对于Optional值，不能直接进行操作，否则会报错：<br>例如  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optionalString: String? = &quot;hell0&quot;</span><br><span class=\"line\">let value = optionalString.hashValue //报错</span><br></pre></td></tr></table></figure>\n<h2 id=\"Optional的-使用\"><a href=\"#Optional的-使用\" class=\"headerlink\" title=\"Optional的 使用\"></a>Optional的 使用</h2><p>然后怎么使用Optional值呢？文档中也有提到说，在使用Optional值的时候需要在具体的操作，比如调用方法、属性、下标索引等前面需要加上一个?，“Optional Chaining的问号的意思是询问是否响应后面这个方法，和原来的isResponseToSelector有些类似”，如果是nil值，也就是Optional.None，固然不能响应后面的方法，所以就会跳过，如果有值，就是Optional.Some，可能就会拆包(unwrap)，然后对拆包后的值执行后面的操作，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hashValue = strValue?.hashValue</span><br></pre></td></tr></table></figure>\n<p>另外，对于Optional值，不能直接进行操作，否则会报错：<br>上面提到Optional值需要拆包(unwrap)后才能得到原来值，然后才能对其操作，那怎么来拆包呢？拆包提到了几种方法，一种是Optional Binding， 比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">if let str = strValue &#123; </span><br><span class=\"line\">    let hashValue = str.hashValue </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一种是在具体的操作前添加!符号，好吧，这又是什么诡异的语法?!</p>\n<p>直接上例子，strValue是Optional的String：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hashValue = strValue!.hashValue</span><br></pre></td></tr></table></figure>\n<p>这里的!表示“我确定这里的的strValue一定是非nil的</p>\n<h2 id=\"提供默认值\"><a href=\"#提供默认值\" class=\"headerlink\" title=\"?? 提供默认值\"></a>?? 提供默认值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nichName: String? = &quot;xx&quot;</span><br><span class=\"line\">let fullNmae: String = &quot;john&quot;</span><br><span class=\"line\">let info = &quot;Hi \\(nichName ?? fullNmae)&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"条件语句及循环\"><a href=\"#条件语句及循环\" class=\"headerlink\" title=\"条件语句及循环\"></a>条件语句及循环</h1><h2 id=\"if-及-for-in\"><a href=\"#if-及-for-in\" class=\"headerlink\" title=\"if 及 for-in\"></a>if 及 for-in</h2><p>if 后必须是Boolean if socre {} 是错误的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let individualScores = [75,43,103,87,12]</span><br><span class=\"line\">var teamScore = 0</span><br><span class=\"line\"></span><br><span class=\"line\">for score in individualScores&#123;</span><br><span class=\"line\">    if score &gt; 50&#123;</span><br><span class=\"line\">        teamScore += 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        teamScore += 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(teamScore)</span><br></pre></td></tr></table></figure>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vegetable = &quot;x red pepper&quot;</span><br><span class=\"line\">switch vegetable &#123;</span><br><span class=\"line\">    case &quot;celery&quot;:</span><br><span class=\"line\">    print(&quot;add some raisins and make ants on a log&quot;)</span><br><span class=\"line\">    case &quot;cucumber&quot;,&quot;watercress&quot;:</span><br><span class=\"line\">    print(&quot;That would make a good tea sandwich&quot;)</span><br><span class=\"line\">    case let x where x.hasPrefix(&quot;pepper&quot;):</span><br><span class=\"line\">    print(&quot;is it a soicy \\(x)&quot;)</span><br><span class=\"line\">case let x where x.hasSuffix(&quot;pepper&quot;):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">default:</span><br><span class=\"line\">    print(&quot;everythingt tastes good in soup&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = 101</span><br><span class=\"line\">repeat&#123;</span><br><span class=\"line\">    m = m * 2</span><br><span class=\"line\">&#125;while m &lt; 100</span><br><span class=\"line\">print(m)</span><br></pre></td></tr></table></figure>\n<p>… 包含最右侧值<br>..&lt; 不包含最右侧值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var firstForLoop = 0</span><br><span class=\"line\">for i in 0...4&#123;</span><br><span class=\"line\">    firstForLoop += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(firstForLoop)</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>fun name(参数了列表) -&gt; 返回值类型{}</p>\n<p>例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func greet(name: String,day: String)-&gt;String</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return &quot;hello \\(name) ,today is \\(day)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(greet(&quot;wpf&quot;, day: &quot;2&quot;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func sumOf(numbers: Int...)-&gt;Int&#123;</span><br><span class=\"line\">    var sum = 0</span><br><span class=\"line\">    for number in numbers&#123;</span><br><span class=\"line\">        sum += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(sumOf(1,2,3,4))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func makeIncremementer() -&gt; ((Int) -&gt; Int)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    func addOne(number: Int) -&gt; Int&#123;</span><br><span class=\"line\">        return number + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var increment = makeIncremementer()</span><br><span class=\"line\">print(increment(7))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数最为参数\"><a href=\"#函数最为参数\" class=\"headerlink\" title=\"函数最为参数\"></a>函数最为参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func hasAnyMatches(list: [Int],condition:(Int)-&gt;Bool) -&gt; Bool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for item in list&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(condition(item))&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func lessThanTen(number:Int) -&gt; Bool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return number &lt; 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var numbers = [20,19,22,12]</span><br><span class=\"line\"></span><br><span class=\"line\">hasAnyMatches(numbers, condition: lessThanTen)</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组最为返回值\"><a href=\"#元组最为返回值\" class=\"headerlink\" title=\"元组最为返回值\"></a>元组最为返回值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func calculateStatistics(scores:[Int]) -&gt;(min:Int ,max:Int,sum:Int)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var min = scores[0]</span><br><span class=\"line\">    var max = scores[0]</span><br><span class=\"line\">    var sum = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    for score in scores&#123;</span><br><span class=\"line\">        if score &gt; max</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = score</span><br><span class=\"line\">        &#125;else if score &lt; min</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min = score</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += score</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return (min,max,sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let statistics = calculateStatistics([1,2,3,4,5,6,7,8,9,10])</span><br><span class=\"line\"></span><br><span class=\"line\">print(statistics.sum)</span><br><span class=\"line\">print(statistics.2)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h1><h2 id=\"声明常量和变量\"><a href=\"#声明常量和变量\" class=\"headerlink\" title=\"声明常量和变量\"></a>声明常量和变量</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let maximumNumberOfLoginAttempts = 10</span><br><span class=\"line\">var currentLoginAttempt = 0</span><br><span class=\"line\">//你可以在一行中声明多个常量或者多个变量，用逗号隔开</span><br><span class=\"line\">var x = 0.0, y = 0.0, z = 0.0</span><br><span class=\"line\">//类型标注  当你声明常量或者变量的时候可以加上类型标注 说明常量或者变量中要存储的值的类型</span><br><span class=\"line\">//注意：一般来说你很少需要写类型标注。如果你在声明常量或者变量的时候赋了一个初始值，Swift可以推断出这个常量或者变量的类型</span><br><span class=\"line\">var welcomeMessage: String</span><br><span class=\"line\">welcomeMessage = &quot;hello&quot;</span><br></pre></td></tr></table></figure>\n<h2 id=\"常量变量的命名规则\"><a href=\"#常量变量的命名规则\" class=\"headerlink\" title=\"常量变量的命名规则\"></a>常量变量的命名规则</h2><p>常量和变量的命名  你可以用任何你喜欢的字符作为常量和变量名，包括 Unicode 字符,常量与变量名不能包含数学符号，箭头，保留的（或者非法的）Unicode 码位，连线与制表符。也不能以数字开头，但是可以在常量与变量名的其他地方包含数字。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let π = 3.141592654</span><br><span class=\"line\">let 你好 = &quot;你好世界&quot;</span><br><span class=\"line\">let abc = 2</span><br></pre></td></tr></table></figure>\n<p>用 \\() 可以更简单的实现在字符串中包含一些值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let apples = 3</span><br><span class=\"line\">let oranges = 5</span><br><span class=\"line\"></span><br><span class=\"line\">let appleSummary = &quot;I have \\(apples) apples&quot;</span><br><span class=\"line\">let fruitSummary = &quot;I have \\(apples+oranges) pieces of fruit&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"数组-字典\"><a href=\"#数组-字典\" class=\"headerlink\" title=\"数组 字典\"></a>数组 字典</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ar shoppingList = [&quot;catfish&quot;,&quot;water&quot;,&quot;tulips&quot;,&quot;blue paint&quot;]</span><br><span class=\"line\">shoppingList[1] = &quot;bottle of water&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">var occupations = [&quot;Malcolm&quot; : &quot;Captain&quot;,&quot;Kaylee&quot;:&quot;Mechanic&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">occupations[&quot;jayne&quot;] = &quot;pub&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(occupations)</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建空数组-和-字典\"><a href=\"#创建空数组-和-字典\" class=\"headerlink\" title=\"创建空数组 和 字典\"></a>创建空数组 和 字典</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var emptyArray = [String]()</span><br><span class=\"line\">var emptyDictionary = [String:Float]()</span><br><span class=\"line\">emptyDictionary[&quot;dd&quot;] = 1.0</span><br><span class=\"line\">print(emptyDictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">emptyArray.append(&quot;dd&quot;)</span><br><span class=\"line\">print(emptyArray)</span><br><span class=\"line\"></span><br><span class=\"line\">//空</span><br><span class=\"line\">shoppingList = []</span><br><span class=\"line\">occupations = [:]</span><br></pre></td></tr></table></figure>\n<h1 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h1><h2 id=\"声明Optional\"><a href=\"#声明Optional\" class=\"headerlink\" title=\"声明Optional\"></a>声明Optional</h2><p>声明为Optional只需要在类型后面紧跟一个?</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optionalString: String? = &quot;hell0&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">print(optionalString == nil)</span><br></pre></td></tr></table></figure>\n<p>对于Optional值，不能直接进行操作，否则会报错：<br>例如  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var optionalString: String? = &quot;hell0&quot;</span><br><span class=\"line\">let value = optionalString.hashValue //报错</span><br></pre></td></tr></table></figure>\n<h2 id=\"Optional的-使用\"><a href=\"#Optional的-使用\" class=\"headerlink\" title=\"Optional的 使用\"></a>Optional的 使用</h2><p>然后怎么使用Optional值呢？文档中也有提到说，在使用Optional值的时候需要在具体的操作，比如调用方法、属性、下标索引等前面需要加上一个?，“Optional Chaining的问号的意思是询问是否响应后面这个方法，和原来的isResponseToSelector有些类似”，如果是nil值，也就是Optional.None，固然不能响应后面的方法，所以就会跳过，如果有值，就是Optional.Some，可能就会拆包(unwrap)，然后对拆包后的值执行后面的操作，比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hashValue = strValue?.hashValue</span><br></pre></td></tr></table></figure>\n<p>另外，对于Optional值，不能直接进行操作，否则会报错：<br>上面提到Optional值需要拆包(unwrap)后才能得到原来值，然后才能对其操作，那怎么来拆包呢？拆包提到了几种方法，一种是Optional Binding， 比如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">if let str = strValue &#123; </span><br><span class=\"line\">    let hashValue = str.hashValue </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>还有一种是在具体的操作前添加!符号，好吧，这又是什么诡异的语法?!</p>\n<p>直接上例子，strValue是Optional的String：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let hashValue = strValue!.hashValue</span><br></pre></td></tr></table></figure>\n<p>这里的!表示“我确定这里的的strValue一定是非nil的</p>\n<h2 id=\"提供默认值\"><a href=\"#提供默认值\" class=\"headerlink\" title=\"?? 提供默认值\"></a>?? 提供默认值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let nichName: String? = &quot;xx&quot;</span><br><span class=\"line\">let fullNmae: String = &quot;john&quot;</span><br><span class=\"line\">let info = &quot;Hi \\(nichName ?? fullNmae)&quot;</span><br></pre></td></tr></table></figure>\n<h1 id=\"条件语句及循环\"><a href=\"#条件语句及循环\" class=\"headerlink\" title=\"条件语句及循环\"></a>条件语句及循环</h1><h2 id=\"if-及-for-in\"><a href=\"#if-及-for-in\" class=\"headerlink\" title=\"if 及 for-in\"></a>if 及 for-in</h2><p>if 后必须是Boolean if socre {} 是错误的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let individualScores = [75,43,103,87,12]</span><br><span class=\"line\">var teamScore = 0</span><br><span class=\"line\"></span><br><span class=\"line\">for score in individualScores&#123;</span><br><span class=\"line\">    if score &gt; 50&#123;</span><br><span class=\"line\">        teamScore += 3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        teamScore += 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(teamScore)</span><br></pre></td></tr></table></figure>\n<h2 id=\"switch\"><a href=\"#switch\" class=\"headerlink\" title=\"switch\"></a>switch</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let vegetable = &quot;x red pepper&quot;</span><br><span class=\"line\">switch vegetable &#123;</span><br><span class=\"line\">    case &quot;celery&quot;:</span><br><span class=\"line\">    print(&quot;add some raisins and make ants on a log&quot;)</span><br><span class=\"line\">    case &quot;cucumber&quot;,&quot;watercress&quot;:</span><br><span class=\"line\">    print(&quot;That would make a good tea sandwich&quot;)</span><br><span class=\"line\">    case let x where x.hasPrefix(&quot;pepper&quot;):</span><br><span class=\"line\">    print(&quot;is it a soicy \\(x)&quot;)</span><br><span class=\"line\">case let x where x.hasSuffix(&quot;pepper&quot;):</span><br><span class=\"line\">    print(x)</span><br><span class=\"line\">default:</span><br><span class=\"line\">    print(&quot;everythingt tastes good in soup&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"循环\"><a href=\"#循环\" class=\"headerlink\" title=\"循环\"></a>循环</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var m = 101</span><br><span class=\"line\">repeat&#123;</span><br><span class=\"line\">    m = m * 2</span><br><span class=\"line\">&#125;while m &lt; 100</span><br><span class=\"line\">print(m)</span><br></pre></td></tr></table></figure>\n<p>… 包含最右侧值<br>..&lt; 不包含最右侧值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">var firstForLoop = 0</span><br><span class=\"line\">for i in 0...4&#123;</span><br><span class=\"line\">    firstForLoop += i</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">print(firstForLoop)</span><br></pre></td></tr></table></figure>\n<h1 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h1><h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><p>fun name(参数了列表) -&gt; 返回值类型{}</p>\n<p>例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func greet(name: String,day: String)-&gt;String</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return &quot;hello \\(name) ,today is \\(day)&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(greet(&quot;wpf&quot;, day: &quot;2&quot;))</span><br></pre></td></tr></table></figure>\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func sumOf(numbers: Int...)-&gt;Int&#123;</span><br><span class=\"line\">    var sum = 0</span><br><span class=\"line\">    for number in numbers&#123;</span><br><span class=\"line\">        sum += number</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return sum</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(sumOf(1,2,3,4))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func makeIncremementer() -&gt; ((Int) -&gt; Int)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    func addOne(number: Int) -&gt; Int&#123;</span><br><span class=\"line\">        return number + 1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return addOne</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var increment = makeIncremementer()</span><br><span class=\"line\">print(increment(7))</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数最为参数\"><a href=\"#函数最为参数\" class=\"headerlink\" title=\"函数最为参数\"></a>函数最为参数</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func hasAnyMatches(list: [Int],condition:(Int)-&gt;Bool) -&gt; Bool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    for item in list&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        if(condition(item))&#123;</span><br><span class=\"line\">            return true</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return false</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func lessThanTen(number:Int) -&gt; Bool</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    return number &lt; 10</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var numbers = [20,19,22,12]</span><br><span class=\"line\"></span><br><span class=\"line\">hasAnyMatches(numbers, condition: lessThanTen)</span><br></pre></td></tr></table></figure>\n<h2 id=\"元组最为返回值\"><a href=\"#元组最为返回值\" class=\"headerlink\" title=\"元组最为返回值\"></a>元组最为返回值</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func calculateStatistics(scores:[Int]) -&gt;(min:Int ,max:Int,sum:Int)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    var min = scores[0]</span><br><span class=\"line\">    var max = scores[0]</span><br><span class=\"line\">    var sum = 0</span><br><span class=\"line\">    </span><br><span class=\"line\">    for score in scores&#123;</span><br><span class=\"line\">        if score &gt; max</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            max = score</span><br><span class=\"line\">        &#125;else if score &lt; min</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            min = score</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        sum += score</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    return (min,max,sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">let statistics = calculateStatistics([1,2,3,4,5,6,7,8,9,10])</span><br><span class=\"line\"></span><br><span class=\"line\">print(statistics.sum)</span><br><span class=\"line\">print(statistics.2)</span><br></pre></td></tr></table></figure>\n"},{"title":"swift开发（二） 闭包","date":"2016-04-20T06:53:50.000Z","_content":"\n***\n\n## 闭包表达式\n\n> { (parameters) -> returnType in statements} \n\n\n***\n代码列子\n\n```\nimport UIKit\n\nvar list = [1,5,2,6,2,8,6,4,9,25,2]\n\nlet a = list.map({(number:Int)->Int in\n    let result = 3 * number\n    return result\n})\n\nprint(a)\n\n\nvar b = list.sort{$0 < $1}\nprint(b)\n\n\nfunc order(number1:Int,number2:Int) -> Bool{\n\n\n    return number2 < number1\n}\nvar bc = list.sort(order)\n\nprint(bc)\n\n// 完整\nvar aa = list.sort({(number1:Int,number2:Int)->Bool in return number1 > number2})\n\nprint(aa)\n\n//简写1 根据上下文推断类型\naa = list.sort({(number1,number2) in return number1 > number2})\n\nprint(aa)\n\n//简写2 单行表达式闭包可以省略 return\naa = list.sort({(number1,number2) in number1 > number2})\n\nprint(aa)\n\n//简写2 参数名简写  $0 代表第一个参数\naa = list.sort({ $0 > $1})\n\nprint(aa)\n\n```\n\n\n","source":"_posts/swift开发(二).md","raw":"---\ntitle: swift开发（二） 闭包\ndate: 2016-04-20 14:53:50\ntags: swift\n---\n\n***\n\n## 闭包表达式\n\n> { (parameters) -> returnType in statements} \n\n\n***\n代码列子\n\n```\nimport UIKit\n\nvar list = [1,5,2,6,2,8,6,4,9,25,2]\n\nlet a = list.map({(number:Int)->Int in\n    let result = 3 * number\n    return result\n})\n\nprint(a)\n\n\nvar b = list.sort{$0 < $1}\nprint(b)\n\n\nfunc order(number1:Int,number2:Int) -> Bool{\n\n\n    return number2 < number1\n}\nvar bc = list.sort(order)\n\nprint(bc)\n\n// 完整\nvar aa = list.sort({(number1:Int,number2:Int)->Bool in return number1 > number2})\n\nprint(aa)\n\n//简写1 根据上下文推断类型\naa = list.sort({(number1,number2) in return number1 > number2})\n\nprint(aa)\n\n//简写2 单行表达式闭包可以省略 return\naa = list.sort({(number1,number2) in number1 > number2})\n\nprint(aa)\n\n//简写2 参数名简写  $0 代表第一个参数\naa = list.sort({ $0 > $1})\n\nprint(aa)\n\n```\n\n\n","slug":"swift开发(二)","published":1,"updated":"2016-04-21T02:54:57.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin9q6vjt00048zqbxrfx6xbd","content":"<hr>\n<h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><blockquote>\n<p>{ (parameters) -&gt; returnType in statements} </p>\n</blockquote>\n<hr>\n<p>代码列子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">var list = [1,5,2,6,2,8,6,4,9,25,2]</span><br><span class=\"line\"></span><br><span class=\"line\">let a = list.map(&#123;(number:Int)-&gt;Int in</span><br><span class=\"line\">    let result = 3 * number</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var b = list.sort&#123;$0 &lt; $1&#125;</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func order(number1:Int,number2:Int) -&gt; Bool&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return number2 &lt; number1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bc = list.sort(order)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bc)</span><br><span class=\"line\"></span><br><span class=\"line\">// 完整</span><br><span class=\"line\">var aa = list.sort(&#123;(number1:Int,number2:Int)-&gt;Bool in return number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写1 根据上下文推断类型</span><br><span class=\"line\">aa = list.sort(&#123;(number1,number2) in return number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写2 单行表达式闭包可以省略 return</span><br><span class=\"line\">aa = list.sort(&#123;(number1,number2) in number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写2 参数名简写  $0 代表第一个参数</span><br><span class=\"line\">aa = list.sort(&#123; $0 &gt; $1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<hr>\n<h2 id=\"闭包表达式\"><a href=\"#闭包表达式\" class=\"headerlink\" title=\"闭包表达式\"></a>闭包表达式</h2><blockquote>\n<p>{ (parameters) -&gt; returnType in statements} </p>\n</blockquote>\n<hr>\n<p>代码列子</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import UIKit</span><br><span class=\"line\"></span><br><span class=\"line\">var list = [1,5,2,6,2,8,6,4,9,25,2]</span><br><span class=\"line\"></span><br><span class=\"line\">let a = list.map(&#123;(number:Int)-&gt;Int in</span><br><span class=\"line\">    let result = 3 * number</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(a)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">var b = list.sort&#123;$0 &lt; $1&#125;</span><br><span class=\"line\">print(b)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">func order(number1:Int,number2:Int) -&gt; Bool&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    return number2 &lt; number1</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var bc = list.sort(order)</span><br><span class=\"line\"></span><br><span class=\"line\">print(bc)</span><br><span class=\"line\"></span><br><span class=\"line\">// 完整</span><br><span class=\"line\">var aa = list.sort(&#123;(number1:Int,number2:Int)-&gt;Bool in return number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写1 根据上下文推断类型</span><br><span class=\"line\">aa = list.sort(&#123;(number1,number2) in return number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写2 单行表达式闭包可以省略 return</span><br><span class=\"line\">aa = list.sort(&#123;(number1,number2) in number1 &gt; number2&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br><span class=\"line\"></span><br><span class=\"line\">//简写2 参数名简写  $0 代表第一个参数</span><br><span class=\"line\">aa = list.sort(&#123; $0 &gt; $1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">print(aa)</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cin9q6vjt00048zqbxrfx6xbd","tag_id":"cin9q6vjk00028zqb88uuzubb","_id":"cin9q6vjx00068zqboaw8jcn4"},{"post_id":"cin9q6vj800008zqbcvpky0ln","tag_id":"cin9q6vjk00028zqb88uuzubb","_id":"cin9q6vjx00078zqbp1uyt7r6"},{"post_id":"cin9q6vje00018zqbnkgju2oe","tag_id":"cin9q6vjk00028zqb88uuzubb","_id":"cin9q6vjy00098zqb1lufvohw"},{"post_id":"cin9q6vjp00038zqbtv6i1xuz","tag_id":"cin9q6vjk00028zqb88uuzubb","_id":"cin9q6vjz000a8zqbi0e8qsrk"}],"Tag":[{"name":"swift","_id":"cin9q6vjk00028zqb88uuzubb"}]}}